import { CropType, ContainerStatus, RowStatus, RackStatus, TrayStatus } from '@/types/farming';

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä
export const mockCrops: CropType[] = [
  {
    id: 'basil',
    name: '–ë–∞–∑–∏–ª–∏–∫',
    icon: 'üåø',
    color: '#22C55E',
    climateRequirements: {
      temperature: { min: 20, max: 25 },
      humidity: { min: 60, max: 70 },
      co2: { min: 800, max: 1200 },
      lighting: { min: 200, max: 400 }
    },
    growthStages: [
      { id: 'germination', name: '–ü—Ä–æ—Ä–∞—â–∏–≤–∞–Ω–∏–µ', duration: 7, description: '–ü—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ —Å–µ–º—è–Ω', icon: 'üå±' },
      { id: 'seedling', name: '–†–∞—Å—Å–∞–¥–∞', duration: 14, description: '–†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞—Å—Å–∞–¥—ã', icon: 'üåø' },
      { id: 'vegetation', name: '–í–µ–≥–µ—Ç–∞—Ü–∏—è', duration: 21, description: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç', icon: 'üçÉ' },
      { id: 'harvest', name: '–°–±–æ—Ä —É—Ä–æ–∂–∞—è', duration: 30, description: '–ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É', icon: '‚úÇÔ∏è' }
    ],
    totalGrowthDays: 72
  },
  {
    id: 'lettuce',
    name: '–°–∞–ª–∞—Ç',
    icon: 'ü•¨',
    color: '#10B981',
    climateRequirements: {
      temperature: { min: 16, max: 22 },
      humidity: { min: 50, max: 65 },
      co2: { min: 600, max: 1000 },
      lighting: { min: 150, max: 300 }
    },
    growthStages: [
      { id: 'germination', name: '–ü—Ä–æ—Ä–∞—â–∏–≤–∞–Ω–∏–µ', duration: 5, description: '–ü—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ —Å–µ–º—è–Ω', icon: 'üå±' },
      { id: 'seedling', name: '–†–∞—Å—Å–∞–¥–∞', duration: 10, description: '–†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞—Å—Å–∞–¥—ã', icon: 'üåø' },
      { id: 'vegetation', name: '–í–µ–≥–µ—Ç–∞—Ü–∏—è', duration: 25, description: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤', icon: 'ü•¨' },
      { id: 'harvest', name: '–°–±–æ—Ä —É—Ä–æ–∂–∞—è', duration: 5, description: '–ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É', icon: '‚úÇÔ∏è' }
    ],
    totalGrowthDays: 45
  },
  {
    id: 'spinach',
    name: '–®–ø–∏–Ω–∞—Ç',
    icon: 'ü•¨',
    color: '#059669',
    climateRequirements: {
      temperature: { min: 15, max: 20 },
      humidity: { min: 55, max: 70 },
      co2: { min: 700, max: 1100 },
      lighting: { min: 180, max: 350 }
    },
    growthStages: [
      { id: 'germination', name: '–ü—Ä–æ—Ä–∞—â–∏–≤–∞–Ω–∏–µ', duration: 6, description: '–ü—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ —Å–µ–º—è–Ω', icon: 'üå±' },
      { id: 'seedling', name: '–†–∞—Å—Å–∞–¥–∞', duration: 12, description: '–†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞—Å—Å–∞–¥—ã', icon: 'üåø' },
      { id: 'vegetation', name: '–í–µ–≥–µ—Ç–∞—Ü–∏—è', duration: 20, description: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç', icon: 'üçÉ' },
      { id: 'harvest', name: '–°–±–æ—Ä —É—Ä–æ–∂–∞—è', duration: 7, description: '–ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É', icon: '‚úÇÔ∏è' }
    ],
    totalGrowthDays: 45
  },
  {
    id: 'arugula',
    name: '–†—É–∫–∫–æ–ª–∞',
    icon: 'üåø',
    color: '#16A34A',
    climateRequirements: {
      temperature: { min: 18, max: 24 },
      humidity: { min: 60, max: 75 },
      co2: { min: 800, max: 1200 },
      lighting: { min: 200, max: 400 }
    },
    growthStages: [
      { id: 'germination', name: '–ü—Ä–æ—Ä–∞—â–∏–≤–∞–Ω–∏–µ', duration: 4, description: '–ü—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ —Å–µ–º—è–Ω', icon: 'üå±' },
      { id: 'seedling', name: '–†–∞—Å—Å–∞–¥–∞', duration: 8, description: '–†–∞–∑–≤–∏—Ç–∏–µ —Ä–∞—Å—Å–∞–¥—ã', icon: 'üåø' },
      { id: 'vegetation', name: '–í–µ–≥–µ—Ç–∞—Ü–∏—è', duration: 18, description: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—Å—Ç', icon: 'üçÉ' },
      { id: 'harvest', name: '–°–±–æ—Ä —É—Ä–æ–∂–∞—è', duration: 5, description: '–ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É', icon: '‚úÇÔ∏è' }
    ],
    totalGrowthDays: 35
  }
];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–æ–Ω–æ–≤
function generateMockTrays(rackId: string): TrayStatus[] {
  const trays: TrayStatus[] = [];

  for (let i = 1; i <= 10; i++) {
    const trayId = `${rackId}_tray_${i}`;
    const random = Math.random();

    let status: TrayStatus['status'] = 'empty';
    let crop = undefined;

    if (random > 0.3) { // 70% –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
      status = 'growing';
      const cropTypes = ['basil', 'lettuce', 'spinach'];
      const selectedCrop = cropTypes[Math.floor(Math.random() * cropTypes.length)];
      const plantedDaysAgo = Math.floor(Math.random() * 30);

      crop = {
        cropId: selectedCrop,
        plantedDate: new Date(Date.now() - plantedDaysAgo * 24 * 60 * 60 * 1000),
        currentStage: 'seedling',
        daysInStage: plantedDaysAgo % 14,
        harvestDate: new Date(Date.now() + (45 - plantedDaysAgo) * 24 * 60 * 60 * 1000)
      };
    }

    trays.push({
      id: trayId,
      rackId,
      position: i,
      status,
      crop
    });
  }

  return trays;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–æ–µ–∫
function generateMockRacks(rowId: string): RackStatus[] {
  const racks: RackStatus[] = [];

  for (let i = 1; i <= 10; i++) {
    const rackId = `${rowId}_rack_${i}`;
    const trays = generateMockTrays(rackId);
    const occupiedTrays = trays.filter(t => t.status !== 'empty').length;

    let status: RackStatus['status'] = 'empty';
    if (occupiedTrays === 10) status = 'full';
    else if (occupiedTrays > 0) status = 'partial';

    racks.push({
      id: rackId,
      rowId,
      position: i,
      trays,
      totalTrays: 10,
      occupiedTrays,
      status
    });
  }

  return racks;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä—è–¥–æ–≤
function generateMockRows(): RowStatus[] {
  const rowNames = ['A', 'B', 'C', 'D'];
  return rowNames.map(name => {
    const rowId = `row_${name}`;
    const racks = generateMockRacks(rowId);
    const totalTrays = racks.reduce((sum, rack) => sum + rack.totalTrays, 0);
    const occupiedTrays = racks.reduce((sum, rack) => sum + rack.occupiedTrays, 0);

    return {
      id: rowId,
      name,
      racks,
      totalTrays,
      occupiedTrays
    };
  });
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
export const mockContainerData: ContainerStatus = {
  id: 'container_41_i2f',
  name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Ññ 41-i2f',
  rows: generateMockRows(),
  currentClimate: {
    temperature: 22.5,
    humidity: 65,
    co2: 950,
    lighting: 250
  },
  activeMode: {
    cropId: 'basil',
    parameters: {
      temperature: { min: 20, max: 25 },
      humidity: { min: 60, max: 70 }
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—É–ª—å—Ç—É—Ä
export function checkCropCompatibility(crop1Id: string, crop2Id: string): boolean {
  const crop1 = mockCrops.find(c => c.id === crop1Id);
  const crop2 = mockCrops.find(c => c.id === crop2Id);

  if (!crop1 || !crop2) return false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
  const tempOverlap = Math.max(0, Math.min(crop1.climateRequirements.temperature.max, crop2.climateRequirements.temperature.max) -
                              Math.max(crop1.climateRequirements.temperature.min, crop2.climateRequirements.temperature.min));

  const humidityOverlap = Math.max(0, Math.min(crop1.climateRequirements.humidity.max, crop2.climateRequirements.humidity.max) -
                                  Math.max(crop1.climateRequirements.humidity.min, crop2.climateRequirements.humidity.min));

  const co2Overlap = Math.max(0, Math.min(crop1.climateRequirements.co2.max, crop2.climateRequirements.co2.max) -
                             Math.max(crop1.climateRequirements.co2.min, crop2.climateRequirements.co2.min));

  // –ö—É–ª—å—Ç—É—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
  return tempOverlap > 0 && humidityOverlap > 0 && co2Overlap > 0;
}

// Alias –¥–ª—è checkCropCompatibility –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const checkClimateCompatibility = checkCropCompatibility;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∫—É–ª—å—Ç—É—Ä
export function getCompatibleCrops(baseCropId: string): CropType[] {
  return mockCrops.filter(crop =>
    crop.id === baseCropId || checkCropCompatibility(baseCropId, crop.id)
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É–ª—å—Ç—É—Ä, —É–∂–µ —Ä–∞—Å—Ç—É—â–∏—Ö –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
export function getExistingCropsInContainer(containerData: ContainerStatus): string[] {
  const existingCrops = new Set<string>();

  containerData.rows.forEach(row => {
    row.racks.forEach(rack => {
      rack.trays.forEach(tray => {
        if (tray.crop && (tray.status === 'growing' || tray.status === 'planned')) {
          existingCrops.add(tray.crop.cropId);
        }
      });
    });
  });

  return Array.from(existingCrops);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–ª—å—Ç—É—Ä, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å —É–∂–µ —Ä–∞—Å—Ç—É—â–∏–º–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
export function getAvailableCropsForContainer(containerData: ContainerStatus): CropType[] {
  const existingCrops = getExistingCropsInContainer(containerData);

  // –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Ç–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫—É–ª—å—Ç—É—Ä—ã
  if (existingCrops.length === 0) {
    return mockCrops;
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –±–∞–∑—É
  if (containerData.activeMode?.cropId) {
    return getCompatibleCrops(containerData.activeMode.cropId);
  }

  // –ò–Ω–∞—á–µ –Ω–∞–π–¥–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∫—É–ª—å—Ç—É—Ä –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
  let compatibleCrops = mockCrops;

  existingCrops.forEach(existingCropId => {
    const currentCompatible = getCompatibleCrops(existingCropId);
    compatibleCrops = compatibleCrops.filter(crop =>
      currentCompatible.some(cc => cc.id === crop.id)
    );
  });

  return compatibleCrops;
}