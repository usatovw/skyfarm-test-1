'use client'

import { useState, useCallback, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  ArrowLeft, 
  Grid3X3, 
  Sprout, 
  Check,
  AlertTriangle,
  Eye,
  Plus,
  Info
} from 'lucide-react';
import ContainerGrid from './ContainerGrid';
import RackDetail from './RackDetail';
import CropSelector from './CropSelector';
import ChangesSummary from './ChangesSummary';
import StopGrowingConfirmation from './StopGrowingConfirmation';
import { ViewMode, SelectionState, ChangesDraft, ContainerStatus } from "@/types/farming";
import { mockContainerData, mockCrops } from "@/data/mockData";
import TrayDetail from './TrayDetail';

export default function GrowthManagement() {
  const [viewMode, setViewMode] = useState<ViewMode>({ current: 'overview' });
  const [selectionState, setSelectionState] = useState<SelectionState>({
    selectedRows: new Set(),
    selectedRacks: new Set(),
    selectedTrays: new Set(),
    mode: 'none'
  });
  const [changesDraft, setChangesDraft] = useState<ChangesDraft>({
    selectedItems: { rows: [], racks: [], trays: [] },
    plannedActions: []
  });
  const [showCropSelector, setShowCropSelector] = useState(false);
  const [showChangesSummary, setShowChangesSummary] = useState(false);
  const [showStopGrowingConfirmation, setShowStopGrowingConfirmation] = useState(false);
  const [stopGrowingData, setStopGrowingData] = useState<{targetIds: string[], targetType: 'tray' | 'rack'} | null>(null);
  const [isLoading, setIsLoading] = useState(false); // –ù–û–í–û–ï: Loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  // –ù–û–í–û–ï: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [pendingChanges, setPendingChanges] = useState<Map<string, string>>(new Map());

  // –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const containerWithPendingChanges = useMemo(() => {
    if (pendingChanges.size === 0) return mockContainerData;

    const updatedContainer: ContainerStatus = {
      ...mockContainerData,
      rows: mockContainerData.rows.map(row => ({
        ...row,
        racks: row.racks.map(rack => ({
          ...rack,
          trays: rack.trays.map(tray => {
            const pendingCropId = pendingChanges.get(tray.id);
            if (pendingCropId) {
              return {
                ...tray,
                status: 'planned' as const,
                crop: {
                  cropId: pendingCropId,
                  plantedDate: new Date(),
                  currentStage: 'seed',
                  daysInStage: 0,
                  harvestDate: undefined
                }
              };
            }
            return tray;
          })
        }))
      }))
    };

    return updatedContainer;
  }, [pendingChanges]);

  // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleCancelAllChanges = useCallback(() => {
    console.log('üîÑ –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    setPendingChanges(new Map());
    setChangesDraft({
      selectedItems: { rows: [], racks: [], trays: [] },
      plannedActions: []
    });
    setSelectionState({
      selectedRows: new Set(),
      selectedRacks: new Set(),
      selectedTrays: new Set(),
      mode: 'none'
    });
  }, []);

  const handleBackToOverview = useCallback(() => {
    setViewMode({ current: 'overview' });
  }, []);

  const handleRackClick = useCallback((rackId: string) => {
    setViewMode({ current: 'rack-detail', selectedRackId: rackId });
  }, []);

  const handleTrayClick = useCallback((trayId: string) => {
    setViewMode({ current: 'tray-detail', selectedTrayId: trayId });
  }, []);

  const handleSelectionChange = useCallback((newSelection: SelectionState) => {
    setSelectionState(newSelection);
  }, []);

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const selectedCount = useMemo(() => 
    selectionState.selectedRows.size + 
    selectionState.selectedRacks.size + 
    selectionState.selectedTrays.size
  , [selectionState]);

  const hasChanges = useMemo(() => 
    changesDraft.plannedActions.length > 0
  , [changesDraft.plannedActions.length]);

  const handlePlantAction = useCallback(() => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    const selectedItems = {
      rows: Array.from(selectionState.selectedRows),
      racks: Array.from(selectionState.selectedRacks), 
      trays: Array.from(selectionState.selectedTrays)
    };
    
    setChangesDraft(prev => ({ ...prev, selectedItems }));
    setShowCropSelector(true);
  }, [selectionState]);

  // –ù–æ–≤—ã–π callback –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥–¥–æ–Ω—ã
  const handlePlantInTrays = useCallback((trayIds: string[]) => {
    setSelectionState({
      selectedRows: new Set(),
      selectedRacks: new Set(),
      selectedTrays: new Set(trayIds),
      mode: 'none'
    });
    
    const selectedItems = {
      rows: [],
      racks: [],
      trays: trayIds
    };
    
    setChangesDraft(prev => ({ ...prev, selectedItems }));
    setShowCropSelector(true);
  }, []);

  const handleCropSelected = useCallback((cropId: string) => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    const currentSelection = selectionState;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –ø–æ–¥–¥–æ–Ω—ã –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    const targetTrayIds = new Set<string>();

    // –ò–∑ –ø—Ä—è–º–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–¥–æ–Ω–æ–≤
    currentSelection.selectedTrays.forEach(trayId => {
      targetTrayIds.add(trayId);
    });

    // –ò–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–µ–∫
    currentSelection.selectedRacks.forEach(rackId => {
      const rack = mockContainerData.rows
        .flatMap(row => row.racks)
        .find(r => r.id === rackId);
      if (rack) {
        rack.trays.forEach(tray => {
          if (tray.status === 'empty') { // –¢–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã
            targetTrayIds.add(tray.id);
          }
        });
      }
    });

    // –ò–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    currentSelection.selectedRows.forEach(rowId => {
      const row = mockContainerData.rows.find(r => r.id === rowId);
      if (row) {
        row.racks.forEach(rack => {
          rack.trays.forEach(tray => {
            if (tray.status === 'empty') { // –¢–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã
              targetTrayIds.add(tray.id);
            }
          });
        });
      }
    });

    // –ù–û–í–û–ï: –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setPendingChanges(prev => {
      const newPending = new Map(prev);
      targetTrayIds.forEach(trayId => {
        newPending.set(trayId, cropId);
      });
      return newPending;
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    const newAction = {
      id: `action_${Date.now()}`,
      type: 'plant' as const,
      targetType: currentSelection.selectedRows.size > 0 ? 'row' as const :
                 currentSelection.selectedRacks.size > 0 ? 'rack' as const : 'tray' as const,
      targetIds: Array.from(targetTrayIds),
      cropId,
      scheduledDate: new Date()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    setChangesDraft(prev => ({
      ...prev,
      plannedActions: [...prev.plannedActions, newAction]
    }));
    
    setShowCropSelector(false);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    setSelectionState({
      selectedRows: new Set(),
      selectedRacks: new Set(), 
      selectedTrays: new Set(),
      mode: 'none'
    });
  }, [selectionState]);

  const handleApplyChanges = useCallback(() => {
    const affectedTrays = changesDraft.plannedActions.reduce((total, action) => total + action.targetIds.length, 0);
    console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', changesDraft);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    setSuccessMessage(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è! –ó–∞–ø—É—â–µ–Ω–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –≤ ${affectedTrays} –ø–æ–¥–¥–æ–Ω–∞—Ö.`);
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    setPendingChanges(new Map());
    setChangesDraft({
      selectedItems: { rows: [], racks: [], trays: [] },
      plannedActions: []
    });
    setShowChangesSummary(false);
    
    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => setSuccessMessage(null), 5000);
  }, [changesDraft]);

  // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–æ–Ω–æ–≤
  const handleClearPlanned = useCallback((targetIds: string[], targetType: 'tray' | 'rack') => {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:', { targetIds, targetType });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã
    const affectedTrayIds = new Set<string>();
    
    if (targetType === 'tray') {
      targetIds.forEach(trayId => {
        const tray = containerWithPendingChanges.rows
          .flatMap(row => row.racks)
          .flatMap(rack => rack.trays)
          .find(t => t.id === trayId);
        if (tray && tray.status === 'planned') {
          affectedTrayIds.add(trayId);
        }
      });
    } else if (targetType === 'rack') {
      targetIds.forEach(rackId => {
        const rack = containerWithPendingChanges.rows
          .flatMap(row => row.racks)
          .find(r => r.id === rackId);
        if (rack) {
          rack.trays.forEach(tray => {
            if (tray.status === 'planned') {
              affectedTrayIds.add(tray.id);
            }
          });
        }
      });
    }

    if (affectedTrayIds.size === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–æ–Ω–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ pendingChanges
    setPendingChanges(prev => {
      const newPending = new Map(prev);
      affectedTrayIds.forEach(trayId => {
        newPending.delete(trayId);
      });
      return newPending;
    });

    // –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ—á–∏—Å—Ç–∫–∏
    const clearAction = {
      id: `clear_${Date.now()}`,
      type: 'clear' as const,
      targetType: targetType,
      targetIds: Array.from(affectedTrayIds),
      scheduledDate: new Date()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    setChangesDraft(prev => ({
      ...prev,
      plannedActions: [...prev.plannedActions, clearAction]
    }));

    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—á–∏—Å—Ç–∫–∏:', clearAction);
  }, [containerWithPendingChanges]);

  // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
  const handleStopGrowing = useCallback((targetIds: string[], targetType: 'tray' | 'rack') => {
    console.log('üõë –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è:', { targetIds, targetType });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    setStopGrowingData({ targetIds, targetType });
    setShowStopGrowingConfirmation(true);
  }, []);

  // –ù–û–í–û–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
  const handleConfirmStopGrowing = useCallback(() => {
    if (!stopGrowingData) return;

    const { targetIds, targetType } = stopGrowingData;
    console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è:', stopGrowingData);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã —Å —Ä–∞—Å—Ç—É—â–∏–º–∏ –∫—É–ª—å—Ç—É—Ä–∞–º–∏
    const affectedTrayIds = new Set<string>();
    
    if (targetType === 'tray') {
      targetIds.forEach(trayId => {
        const tray = containerWithPendingChanges.rows
          .flatMap(row => row.racks)
          .flatMap(rack => rack.trays)
          .find(t => t.id === trayId);
        if (tray && (tray.status === 'growing' || tray.status === 'ready')) {
          affectedTrayIds.add(trayId);
        }
      });
    } else if (targetType === 'rack') {
      targetIds.forEach(rackId => {
        const rack = containerWithPendingChanges.rows
          .flatMap(row => row.racks)
          .find(r => r.id === rackId);
        if (rack) {
          rack.trays.forEach(tray => {
            if (tray.status === 'growing' || tray.status === 'ready') {
              affectedTrayIds.add(tray.id);
            }
          });
        }
      });
    }

    if (affectedTrayIds.size === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å—Ç—É—â–∏—Ö –∫—É–ª—å—Ç—É—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
      setShowStopGrowingConfirmation(false);
      setStopGrowingData(null);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const stopAction = {
      id: `stop_${Date.now()}`,
      type: 'stop_growing' as const,
      targetType: targetType,
      targetIds: Array.from(affectedTrayIds),
      scheduledDate: new Date(),
      forceStop: true
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    setChangesDraft(prev => ({
      ...prev,
      plannedActions: [...prev.plannedActions, stopAction]
    }));

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    setShowStopGrowingConfirmation(false);
    setStopGrowingData(null);

    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', stopAction);
  }, [stopGrowingData, containerWithPendingChanges]);

  const breadcrumbItems = [
    { label: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Ññ 41-i2f', onClick: handleBackToOverview }
  ];

  if (viewMode.current === 'rack-detail' && viewMode.selectedRackId) {
    const rack = containerWithPendingChanges.rows
      .flatMap(row => row.racks)
      .find(r => r.id === viewMode.selectedRackId);
    if (rack) {
      breadcrumbItems.push({ label: `–°—Ç–æ–π–∫–∞ ${rack.rowId.split('_')[1]}${rack.position}`, onClick: () => {} });
    }
  }

  if (viewMode.current === 'tray-detail' && viewMode.selectedTrayId) {
    breadcrumbItems.push({ label: '–ü–æ–¥–¥–æ–Ω', onClick: () => {} });
  }

  return (
    <div className="space-y-6">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          {breadcrumbItems.map((item, index) => (
            <div key={index} className="flex items-center gap-2">
              {index > 0 && <span>/</span>}
              <button 
                onClick={item.onClick}
                className="hover:text-foreground transition-colors font-medium"
              >
                {item.label}
              </button>
            </div>
          ))}
        </div>
        
        {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="flex items-center gap-4 text-sm text-muted-foreground">
          {viewMode.current === 'overview' && (
            <>
              <span>400 –ø–æ–¥–¥–æ–Ω–æ–≤</span>
              <span>‚Ä¢</span>
              <span>{containerWithPendingChanges.rows.reduce((sum, row) => sum + row.occupiedTrays, 0)} –∑–∞–Ω—è—Ç–æ</span>
            </>
          )}
          {viewMode.current === 'rack-detail' && viewMode.selectedRackId && (
            <>
              <span>10 –ø–æ–¥–¥–æ–Ω–æ–≤</span>
              <span>‚Ä¢</span>
              <span>{containerWithPendingChanges.rows
                .flatMap(row => row.racks)
                .find(r => r.id === viewMode.selectedRackId)?.occupiedTrays || 0} –∑–∞–Ω—è—Ç–æ</span>
            </>
          )}
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è –∏ —Å—Ç–∞—Ç—É—Å */}
      {viewMode.current === 'overview' && (
        <div className="flex items-center justify-between">
          <div className="space-y-2">
            <h2 className="text-xl font-semibold text-foreground">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ–º</h2>
            <p className="text-sm text-muted-foreground">
              –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: 4 —Ä—è–¥–∞ √ó 10 —Å—Ç–æ–µ–∫ √ó 10 –ø–æ–¥–¥–æ–Ω–æ–≤ = 400 –ø–æ–¥–¥–æ–Ω–æ–≤
            </p>
          </div>
          
          <div className="flex items-center gap-3">
            {hasChanges && (
              <>
                <Button 
                  variant="outline"
                  onClick={handleCancelAllChanges}
                  className="flex items-center gap-2 text-destructive hover:text-destructive"
                >
                  <AlertTriangle className="h-4 w-4" />
                  –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </Button>
                <Button 
                  onClick={() => setShowChangesSummary(true)}
                  className="flex items-center gap-2"
                >
                  <Check className="h-4 w-4" />
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è ({changesDraft.plannedActions.length})
                </Button>
              </>
            )}
            
            {selectedCount > 0 && (
              <div className="flex items-center gap-2">
                <Badge variant="secondary">
                  –í—ã–±—Ä–∞–Ω–æ: {selectedCount}
                </Badge>
                <Button 
                  size="sm"
                  onClick={handlePlantAction}
                  className="flex items-center gap-2"
                >
                  <Sprout className="h-4 w-4" />
                  –ó–∞—Å–∞–¥–∏—Ç—å
                </Button>
              </div>
            )}
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
      {viewMode.current === 'overview' && (
        <ContainerGrid 
          containerData={containerWithPendingChanges}
          selectionState={selectionState}
          onSelectionChange={handleSelectionChange}
          onRackClick={handleRackClick}
          onPlantAction={handlePlantAction}
          onClearPlanned={handleClearPlanned}
          onStopGrowing={handleStopGrowing}
        />
      )}

      {viewMode.current === 'rack-detail' && viewMode.selectedRackId && (
        <div className="space-y-4">
          <Button 
            variant="ghost" 
            onClick={handleBackToOverview}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            –ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É
          </Button>
          <RackDetail 
            rackId={viewMode.selectedRackId}
            containerData={containerWithPendingChanges}
            onTrayClick={handleTrayClick}
            onPlantAction={handlePlantInTrays}
            onClearPlanned={handleClearPlanned}
            onStopGrowing={handleStopGrowing}
          />
        </div>
      )}

      {viewMode.current === 'tray-detail' && viewMode.selectedTrayId && (
        <div className="space-y-4">
          <Button 
            variant="ghost" 
            onClick={() => {
              if (viewMode.selectedRackId) {
                setViewMode({ current: 'rack-detail', selectedRackId: viewMode.selectedRackId });
              } else {
                handleBackToOverview();
              }
            }}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            –ù–∞–∑–∞–¥
          </Button>
          <TrayDetail 
            trayId={viewMode.selectedTrayId}
            containerData={containerWithPendingChanges}
            onPlantAction={handlePlantInTrays}
            onClearPlanned={handleClearPlanned}
            onStopGrowing={handleStopGrowing}
          />
        </div>
      )}

      {/* –°–µ–ª–µ–∫—Ç–æ—Ä –∫—É–ª—å—Ç—É—Ä */}
      {showCropSelector && (
        <CropSelector
          isOpen={showCropSelector}
          onClose={() => setShowCropSelector(false)}
          onCropSelected={handleCropSelected}
          availableCrops={mockCrops}
          currentMode={mockContainerData.activeMode?.cropId}
          containerData={containerWithPendingChanges}
        />
      )}

      {/* –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
      {showChangesSummary && (
        <ChangesSummary
          isOpen={showChangesSummary}
          onClose={() => setShowChangesSummary(false)}
          changes={changesDraft}
          onApply={handleApplyChanges}
          containerData={mockContainerData}
        />
      )}

      {/* –ú–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è */}
      {showStopGrowingConfirmation && stopGrowingData && (
        <StopGrowingConfirmation
          isOpen={showStopGrowingConfirmation}
          onClose={() => {
            setShowStopGrowingConfirmation(false);
            setStopGrowingData(null);
          }}
          onConfirm={handleConfirmStopGrowing}
          targetIds={stopGrowingData.targetIds}
          targetType={stopGrowingData.targetType}
          containerData={containerWithPendingChanges}
        />
      )}

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
      {selectedCount > 0 && (
        <Alert>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            –í—ã–±—Ä–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {selectedCount}. –í —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫—É–ª—å—Ç—É—Ä—É.
          </AlertDescription>
        </Alert>
      )}

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ */}
      {successMessage && (
        <Alert className="bg-green-50 border-green-200">
          <Check className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            {successMessage}
          </AlertDescription>
        </Alert>
      )}

      {/* –ù–û–í–û–ï: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ pending –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö */}
      {pendingChanges.size > 0 && (
        <Alert className="bg-blue-50 border-blue-200">
          <Info className="h-4 w-4 text-blue-600" />
          <AlertDescription className="text-blue-800">
            <strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</strong> –í {pendingChanges.size} {pendingChanges.size === 1 ? '–ø–æ–¥–¥–æ–Ω–µ' : pendingChanges.size < 5 ? '–ø–æ–¥–¥–æ–Ω–∞—Ö' : '–ø–æ–¥–¥–æ–Ω–∞—Ö'} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–∞–¥–∫–∞. 
            –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è".
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
}