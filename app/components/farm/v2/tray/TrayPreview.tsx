'use client';

import { Tray } from '@/types/farming';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { getCropById } from '@/data/cropsData';
import { Calendar, Sprout, TrendingUp, Scissors, Trash2, Undo2, StopCircle, ArrowRight } from 'lucide-react';

interface TrayPreviewProps {
  tray: Tray | null | undefined;
  onPlant?: () => void;
  onHarvest?: () => void;
  onClear?: () => void;
  onCancelStop?: () => void;
  onStop?: () => void;
  onEnterTray?: () => void;
}

export function TrayPreview({ tray, onPlant, onHarvest, onClear, onCancelStop, onStop, onEnterTray }: TrayPreviewProps) {
  if (!tray) {
    return (
      <Card className="p-8 text-center">
        <div className="text-muted-foreground">
          –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–¥–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        </div>
      </Card>
    );
  }

  if (tray.status === 'empty') {
    return (
      <Card className="p-8">
        <div className="text-center space-y-4">
          <div className="text-4xl">üì≠</div>
          <div className="text-lg font-semibold">–ü–æ–¥–¥–æ–Ω –ø—É—Å—Ç</div>
          <div className="text-sm text-muted-foreground">
            –ü–æ–¥–¥–æ–Ω ‚Ññ {tray.position} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
          </div>
          <div className="space-y-2">
            {onPlant && (
              <Button onClick={onPlant} className="w-full">
                <Sprout className="mr-2 h-4 w-4" />
                –ó–∞—Å–∞–¥–∏—Ç—å
              </Button>
            )}
            {onEnterTray && (
              <Button onClick={onEnterTray} variant="outline" className="w-full">
                <ArrowRight className="mr-2 h-4 w-4" />
                –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–¥–æ–Ω
              </Button>
            )}
          </div>
        </div>
      </Card>
    );
  }

  if (tray.status === 'planned') {
    const crop = getCropById(tray.crop!.cropId);
    return (
      <Card className="p-6 space-y-4">
        <div className="flex items-center gap-3">
          <div className="text-4xl">{crop?.icon}</div>
          <div>
            <div className="text-xl font-bold">{crop?.name}</div>
            <div className="text-sm text-blue-600">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</div>
          </div>
        </div>
        <div className="text-sm text-muted-foreground">
          –ü–æ—Å–∞–¥–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        </div>
        <div className="space-y-2">
          {onClear && (
            <Button onClick={onClear} variant="outline" className="w-full">
              <Trash2 className="mr-2 h-4 w-4" />
              –û—á–∏—Å—Ç–∏—Ç—å
            </Button>
          )}
          {onEnterTray && (
            <Button onClick={onEnterTray} variant="outline" className="w-full">
              <ArrowRight className="mr-2 h-4 w-4" />
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–¥–æ–Ω
            </Button>
          )}
        </div>
      </Card>
    );
  }

  if (tray.status === 'growing' && tray.crop) {
    const crop = getCropById(tray.crop.cropId);
    const daysLeft = crop ? crop.totalGrowthDays - tray.crop.totalDaysGrowing : 0;

    return (
      <Card className="p-6 space-y-4">
        <div className="flex items-center gap-3">
          <div className="text-4xl">{crop?.icon}</div>
          <div className="flex-1">
            <div className="text-xl font-bold">{crop?.name}</div>
            <div className="text-sm text-green-600">–†–∞—Å—Ç–µ—Ç</div>
          </div>
        </div>

        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–æ—Å—Ç–∞</span>
            <span className="font-semibold">{Math.round(tray.crop.stageProgress)}%</span>
          </div>
          <Progress value={tray.crop.stageProgress} />
        </div>

        <div className="grid grid-cols-2 gap-4 pt-2">
          <div className="space-y-1">
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Calendar className="h-4 w-4" />
              –ü–æ—Å–∞–∂–µ–Ω–æ
            </div>
            <div className="font-semibold">
              {new Date(tray.crop.plantedDate).toLocaleDateString('ru-RU')}
            </div>
          </div>
          <div className="space-y-1">
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <TrendingUp className="h-4 w-4" />
              –î–Ω–µ–π —Ä–∞—Å—Ç–µ—Ç
            </div>
            <div className="font-semibold">{tray.crop.totalDaysGrowing}</div>
          </div>
          <div className="space-y-1">
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Sprout className="h-4 w-4" />
              –î–æ —Å–±–æ—Ä–∞
            </div>
            <div className="font-semibold">{daysLeft} –¥–Ω–µ–π</div>
          </div>
          <div className="space-y-1">
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Calendar className="h-4 w-4" />
              –°–±–æ—Ä
            </div>
            <div className="font-semibold">
              {new Date(tray.crop.estimatedHarvestDate).toLocaleDateString('ru-RU')}
            </div>
          </div>
        </div>

        <div className="pt-2 border-t">
          <div className="text-sm text-muted-foreground">–°—Ç–∞–¥–∏—è —Ä–æ—Å—Ç–∞</div>
          <div className="font-semibold capitalize">{tray.crop.currentStage}</div>
        </div>

        <div className="space-y-2">
          {onStop && (
            <Button onClick={onStop} variant="destructive" className="w-full">
              <StopCircle className="mr-2 h-4 w-4" />
              –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ
            </Button>
          )}
          {onEnterTray && (
            <Button onClick={onEnterTray} variant="outline" className="w-full">
              <ArrowRight className="mr-2 h-4 w-4" />
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–¥–æ–Ω
            </Button>
          )}
        </div>
      </Card>
    );
  }

  if (tray.status === 'ready' && tray.crop) {
    const crop = getCropById(tray.crop.cropId);
    return (
      <Card className="p-6 space-y-4 bg-emerald-50">
        <div className="flex items-center gap-3">
          <div className="text-4xl">{crop?.icon}</div>
          <div>
            <div className="text-xl font-bold">{crop?.name}</div>
            <div className="text-sm text-emerald-600 font-semibold">‚úì –ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É</div>
          </div>
        </div>
        <div className="text-sm">
          –í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π.
        </div>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <div className="text-sm text-muted-foreground">–ü–æ—Å–∞–∂–µ–Ω–æ</div>
            <div className="font-semibold">
              {new Date(tray.crop.plantedDate).toLocaleDateString('ru-RU')}
            </div>
          </div>
          <div>
            <div className="text-sm text-muted-foreground">–í—ã—Ä–∞—â–µ–Ω–æ</div>
            <div className="font-semibold">{tray.crop.totalDaysGrowing} –¥–Ω–µ–π</div>
          </div>
        </div>
        <div className="space-y-2">
          {onHarvest && (
            <Button onClick={onHarvest} className="w-full">
              <Scissors className="mr-2 h-4 w-4" />
              –°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π
            </Button>
          )}
          {onEnterTray && (
            <Button onClick={onEnterTray} variant="outline" className="w-full">
              <ArrowRight className="mr-2 h-4 w-4" />
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–¥–æ–Ω
            </Button>
          )}
        </div>
      </Card>
    );
  }

  if (tray.status === 'harvested') {
    return (
      <Card className="p-6 space-y-4 bg-yellow-50">
        <div className="text-center space-y-3">
          <div className="text-4xl">üì¶</div>
          <div className="text-lg font-bold">–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω</div>
          <div className="text-sm text-muted-foreground">
            –ü–æ–¥–¥–æ–Ω —Ç—Ä–µ–±—É–µ—Ç –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Å–∞–¥–∫–æ–π
          </div>
          <div className="space-y-2">
            {onClear && (
              <Button onClick={onClear} variant="outline" className="w-full">
                <Trash2 className="mr-2 h-4 w-4" />
                –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥–¥–æ–Ω
              </Button>
            )}
            {onEnterTray && (
              <Button onClick={onEnterTray} variant="outline" className="w-full">
                <ArrowRight className="mr-2 h-4 w-4" />
                –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–¥–æ–Ω
              </Button>
            )}
          </div>
        </div>
      </Card>
    );
  }

  if (tray.status === 'stop_pending') {
    const crop = getCropById(tray.crop!.cropId);
    return (
      <Card className="p-6 space-y-4 bg-orange-50">
        <div className="flex items-center gap-3">
          <div className="text-4xl">‚ö†Ô∏è</div>
          <div>
            <div className="text-xl font-bold">{crop?.name}</div>
            <div className="text-sm text-orange-600 font-semibold">
              –ü–æ–º–µ—á–µ–Ω –Ω–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ
            </div>
          </div>
        </div>
        <div className="text-sm">
          –í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.
          –ö—É–ª—å—Ç—É—Ä–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.
        </div>
        <div className="space-y-2">
          {onCancelStop && (
            <Button onClick={onCancelStop} variant="outline" className="w-full">
              <Undo2 className="mr-2 h-4 w-4" />
              –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ
            </Button>
          )}
          {onEnterTray && (
            <Button onClick={onEnterTray} variant="outline" className="w-full">
              <ArrowRight className="mr-2 h-4 w-4" />
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–¥–¥–æ–Ω
            </Button>
          )}
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6">
      <div className="text-sm text-muted-foreground">
        –°—Ç–∞—Ç—É—Å: {tray.status}
      </div>
    </Card>
  );
}