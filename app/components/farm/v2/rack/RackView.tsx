'use client';

import { Rack, Tray } from '@/types/farming';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowLeft } from 'lucide-react';
import { TrayCard } from './TrayCard';
import { TrayPreview } from '../tray/TrayPreview';
import { ContextMenu, getTrayContextMenuItems } from '../actions/ContextMenu';
import { MultiSelectPanel } from '../actions/MultiSelectPanel';
import StopGrowingConfirmation from '../../StopGrowingConfirmation';
import { useState } from 'react';

interface RackViewProps {
  rack: Rack;
  onBack: () => void;
  onEnterTray?: (trayId: string) => void;
  onPlantTray?: (trayId: string) => void;
  onHarvestTray?: (trayId: string) => void;
  onClearTray?: (trayId: string) => void;
  onStopTray?: (trayId: string) => void;
  onCancelStopTray?: (trayId: string) => void;
  onPlantMultiple?: (trayIds: string[]) => void; // –ú–∞—Å—Å–æ–≤–∞—è –ø–æ—Å–∞–¥–∫–∞
  onHarvestMultiple?: (trayIds: string[]) => void; // –ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä
  onClearMultiple?: (trayIds: string[]) => void; // –ú–∞—Å—Å–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
  onStopMultiple?: (trayIds: string[]) => void; // –ú–∞—Å—Å–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  onCancelStopMultiple?: (trayIds: string[]) => void; // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  containerData: any; // Container data for confirmation modal
}

export function RackView({ rack, onBack, onEnterTray, onPlantTray, onHarvestTray, onClearTray, onStopTray, onCancelStopTray, onPlantMultiple, onHarvestMultiple, onClearMultiple, onStopMultiple, onCancelStopMultiple, containerData }: RackViewProps) {
  const [selectedTrayId, setSelectedTrayId] = useState<string | null>(null);
  const [selectedTrays, setSelectedTrays] = useState<Set<string>>(new Set());
  const [mode, setMode] = useState<'single' | 'multi'>('single');
  const [contextMenu, setContextMenu] = useState<{
    trayId: string;
    position: { x: number; y: number };
  } | null>(null);
  const [showStopConfirmation, setShowStopConfirmation] = useState(false);
  const [trayToStop, setTrayToStop] = useState<string | null>(null);

  const selectedTray = selectedTrayId
    ? rack.trays.find(t => t.id === selectedTrayId)
    : null;

  const contextTray = contextMenu
    ? rack.trays.find(t => t.id === contextMenu.trayId)
    : null;

  const handleTrayShortPress = (trayId: string) => {
    if (mode === 'multi') {
      // –í –º—É–ª—å—Ç–∏—Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–¥–æ–Ω–∞
      const newSelected = new Set(selectedTrays);
      if (newSelected.has(trayId)) {
        newSelected.delete(trayId);
      } else {
        newSelected.add(trayId);
      }
      setSelectedTrays(newSelected);
    } else {
      // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–¥–æ–Ω –¥–ª—è –ø—Ä–µ–≤—å—é
      setSelectedTrayId(trayId);
    }
  };

  const handleTrayLongPress = (trayId: string, event: React.MouseEvent | React.TouchEvent) => {
    event.preventDefault();
    const x = 'clientX' in event ? event.clientX : event.touches[0].clientX;
    const y = 'clientY' in event ? event.clientY : event.touches[0].clientY;

    setContextMenu({
      trayId,
      position: { x, y }
    });
  };

  const handleStopTrayWithConfirmation = (trayId: string) => {
    const tray = rack.trays.find(t => t.id === trayId);
    console.log('üõë RackView: handleStopTrayWithConfirmation –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–¥–¥–æ–Ω–∞:', trayId);
    console.log('üõë RackView: –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–¥–¥–æ–Ω:', tray);
    console.log('üõë RackView: —Å—Ç–∞—Ç—É—Å –ø–æ–¥–¥–æ–Ω–∞:', tray?.status);
    console.log('üõë RackView: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:', !['empty', 'harvested'].includes(tray?.status || ''));

    // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ–¥–¥–æ–Ω—ã —Å–æ –≤—Å–µ–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∫—Ä–æ–º–µ –ø—É—Å—Ç—ã—Ö –∏ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö
    if (tray && !['empty', 'harvested'].includes(tray.status)) {
      console.log('üõë RackView: –ü–û–ö–ê–ó–´–í–ê–ï–ú –ú–û–î–ê–õ–ö–£ –¥–ª—è –ø–æ–¥–¥–æ–Ω–∞:', trayId);
      setTrayToStop(trayId);
      setShowStopConfirmation(true);
    } else {
      console.log('üõë RackView: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è –ø–æ–¥–¥–æ–Ω–∞:', trayId, '—Å—Ç–∞—Ç—É—Å:', tray?.status);
    }
  };

  const handleConfirmStop = (selectedTrayIds: string[]) => {
    if (onStopTray) {
      selectedTrayIds.forEach(trayId => onStopTray(trayId));
    }
    setShowStopConfirmation(false);
    setTrayToStop(null);
  };

  const handleCancelStop = () => {
    setShowStopConfirmation(false);
    setTrayToStop(null);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="outline" size="icon" onClick={onBack}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h2 className="text-2xl font-bold">–°—Ç–æ–π–∫–∞ {rack.position}</h2>
            <div className="text-sm text-muted-foreground">
              {rack.occupiedTrays} –∏–∑ 7 –ø–æ–¥–¥–æ–Ω–æ–≤ –∑–∞–Ω—è—Ç–æ
            </div>
          </div>
        </div>
        <div className="flex gap-2">
          {mode === 'multi' && (
            <Button variant="outline" onClick={() => {
              setMode('single');
              setSelectedTrays(new Set());
            }}>
              –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä
            </Button>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –°—Ö–µ–º–∞ —Å—Ç–æ–π–∫–∏ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ */}
        <div className="space-y-3">
          <h3 className="font-semibold">–°—Ö–µ–º–∞ —Å—Ç–æ–π–∫–∏</h3>
          <div className="flex flex-col-reverse gap-2">
            {rack.trays.map((tray) => (
              <TrayCard
                key={tray.id}
                tray={tray}
                isSelected={mode === 'multi' ? selectedTrays.has(tray.id) : selectedTrayId === tray.id}
                onClick={() => handleTrayShortPress(tray.id)}
                onLongPress={(e) => handleTrayLongPress(tray.id, e)}
                mode={mode}
              />
            ))}
          </div>
        </div>

        {/* –ü—Ä–µ–≤—å—é –ø–æ–¥–¥–æ–Ω–∞ */}
        <div className="space-y-3">
          <h3 className="font-semibold">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–æ–Ω–µ</h3>
          <TrayPreview
            tray={selectedTray}
            onEnterTray={selectedTrayId ? () => onEnterTray && onEnterTray(selectedTrayId) : undefined}
            onPlant={selectedTrayId ? () => onPlantTray && onPlantTray(selectedTrayId) : undefined}
            onHarvest={selectedTrayId ? () => onHarvestTray && onHarvestTray(selectedTrayId) : undefined}
            onClear={selectedTrayId ? () => onClearTray && onClearTray(selectedTrayId) : undefined}
            onStop={selectedTrayId ? () => handleStopTrayWithConfirmation(selectedTrayId) : undefined}
            onCancelStop={selectedTrayId ? () => onCancelStopTray && onCancelStopTray(selectedTrayId) : undefined}
            containerData={containerData}
          />
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é */}
      {contextMenu && contextTray && (
        <ContextMenu
          position={contextMenu.position}
          items={getTrayContextMenuItems(
            contextTray,
            null, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–¥–æ–Ω" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–æ–π–∫–∏
            () => {
              // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –º—É–ª—å—Ç–∏—Ä–µ–∂–∏–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–¥–æ–Ω
              setMode('multi');
              const newSelected = new Set(selectedTrays);
              newSelected.add(contextMenu.trayId);
              setSelectedTrays(newSelected);
              setContextMenu(null);
            },
            () => onPlantTray && onPlantTray(contextMenu.trayId),
            () => onHarvestTray && onHarvestTray(contextMenu.trayId),
            () => onClearTray && onClearTray(contextMenu.trayId),
            () => handleStopTrayWithConfirmation(contextMenu.trayId),
            () => onCancelStopTray && onCancelStopTray(contextMenu.trayId)
          )}
          onClose={() => setContextMenu(null)}
        />
      )}

      {/* –ü–∞–Ω–µ–ª—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ */}
      {mode === 'multi' && selectedTrays.size > 0 && (
        <MultiSelectPanel
          selectedCount={selectedTrays.size}
          onPlant={() => {
            // –ú–∞—Å—Å–æ–≤–∞—è –ø–æ—Å–∞–¥–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä –∫—É–ª—å—Ç—É—Ä
            const trayIds = Array.from(selectedTrays);
            onPlantMultiple && onPlantMultiple(trayIds);
            setMode('single');
            setSelectedTrays(new Set());
          }}
          onClear={() => {
            // –ú–∞—Å—Å–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–æ–Ω–æ–≤
            const trayIds = Array.from(selectedTrays);
            onClearMultiple && onClearMultiple(trayIds);
            setMode('single');
            setSelectedTrays(new Set());
          }}
          onCancel={() => {
            setMode('single');
            setSelectedTrays(new Set());
          }}
          onHarvest={() => {
            // –ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä —É—Ä–æ–∂–∞—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–æ–Ω–æ–≤
            const trayIds = Array.from(selectedTrays);
            onHarvestMultiple && onHarvestMultiple(trayIds);
            setMode('single');
            setSelectedTrays(new Set());
          }}
          onStopGrowing={() => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–æ–Ω–æ–≤
            setShowStopConfirmation(true);
          }}
          onCancelStop={() => {
            // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–æ–Ω–æ–≤
            const trayIds = Array.from(selectedTrays);
            onCancelStopMultiple && onCancelStopMultiple(trayIds);
            setMode('single');
            setSelectedTrays(new Set());
          }}
        />
      )}

      {/* –ú–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
      {(trayToStop || (selectedTrays.size > 0 && showStopConfirmation)) && (
        <StopGrowingConfirmation
          isOpen={showStopConfirmation}
          onClose={handleCancelStop}
          onConfirm={(selectedTrayIds) => {
            if (trayToStop) {
              // –û–±—ã—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–¥–æ–Ω–∞
              handleConfirmStop(selectedTrayIds);
            } else {
              // –ú–∞—Å—Å–æ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–æ–Ω–æ–≤
              onStopMultiple && onStopMultiple(selectedTrayIds);
              setShowStopConfirmation(false);
              setMode('single');
              setSelectedTrays(new Set());
            }
          }}
          targetIds={trayToStop ? [trayToStop] : Array.from(selectedTrays)}
          targetType="tray"
          containerData={containerData}
        />
      )}
    </div>
  );
}