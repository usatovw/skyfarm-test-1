'use client';

import { Container, Row, Rack } from '@/types/farming';
import { ContainerStats } from './ContainerStats';
import { RackCard } from './RackCard';
import { MultiSelectPanel } from '../actions/MultiSelectPanel';
import { ContextMenu, getRackContextMenuItems } from '../actions/ContextMenu';
import { Button } from '@/components/ui/button';
import { useState } from 'react';
import StopGrowingConfirmation from '../../StopGrowingConfirmation';

interface ContainerViewProps {
  container: Container;
  onEnterRack?: (rackId: string) => void;
  onPlantClick?: () => void;
  onApplyChangesClick?: () => void;
  hasChanges?: boolean;
  changesCount?: number;
  selection: ReturnType<typeof import('../hooks/useSelection').useSelection>;
  draftActions: ReturnType<typeof import('../hooks/useDraftActions').useDraftActions>;
  onInstantClearPlanned?: (targetIds: string[], targetType: 'rack' | 'tray') => void;
  onInstantCancelStop?: (targetIds: string[], targetType: 'rack' | 'tray') => void;
  onInstantStopPlanning?: (affectedTrays: string[]) => void;
}

export function ContainerView({
  container,
  onEnterRack,
  onPlantClick,
  onApplyChangesClick,
  hasChanges,
  changesCount,
  selection,
  draftActions,
  onInstantClearPlanned,
  onInstantCancelStop,
  onInstantStopPlanning
}: ContainerViewProps) {
  const [contextMenu, setContextMenu] = useState<{
    rackId: string;
    position: { x: number; y: number };
  } | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
  const [showMassStopConfirmation, setShowMassStopConfirmation] = useState(false);
  const [pendingStopAction, setPendingStopAction] = useState<{
    selectedRackIds: string[];
    affectedTrays: string[];
  } | null>(null);

  const handleSelectRow = (row: Row) => {
    const rackIds = row.racks.map(r => r.id);
    selection.selectRow(row.id, rackIds);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const handleMassStopConfirm = (selectedTrayIds: string[]) => {
    if (pendingStopAction) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∫–æ–≤
      draftActions.addAction({
        type: 'stop_growing',
        targetType: 'rack',
        targetIds: pendingStopAction.selectedRackIds,
        affectedTrays: selectedTrayIds
      });

      // –ú–ì–ù–û–í–ï–ù–ù–û –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ 'stop_pending' —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ—Ç–∫–æ–≤
      onInstantStopPlanning?.(selectedTrayIds);
    }

    setShowMassStopConfirmation(false);
    setPendingStopAction(null);
  };

  const handleMassStopCancel = () => {
    setShowMassStopConfirmation(false);
    setPendingStopAction(null);
  };

  const handleRackShortPress = (rackId: string) => {
    if (selection.mode === 'multi') {
      selection.toggleRack(rackId);
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ä–µ–∑ —Å—Ç–æ–π–∫–∏
      if (onEnterRack) {
        onEnterRack(rackId);
      }
    }
  };

  const handleRackLongPress = (rackId: string, event: React.MouseEvent | React.TouchEvent) => {
    event.preventDefault();
    const x = 'clientX' in event ? event.clientX : event.touches[0].clientX;
    const y = 'clientY' in event ? event.clientY : event.touches[0].clientY;

    setContextMenu({
      rackId,
      position: { x, y }
    });
  };

  const getRackForContextMenu = () => {
    if (!contextMenu) return null;
    return container.rows
      .flatMap(r => r.racks)
      .find(r => r.id === contextMenu.rackId);
  };

  const contextRack = getRackForContextMenu();

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">{container.name}</h1>
          <div className="text-sm text-muted-foreground mt-1">
            –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {container.currentClimate.temperature}¬∞C |
            –í–ª–∞–∂–Ω–æ—Å—Ç—å: {container.currentClimate.humidity}% |
            pH: {container.currentClimate.ph} |
            EC: {container.currentClimate.ec} ¬µS/—Å–º
          </div>
        </div>
        <div className="flex gap-2">
          {hasChanges && (
            <Button onClick={onApplyChangesClick} variant="default" size="lg">
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è ({changesCount})
            </Button>
          )}
          {selection.hasSelection && (
            <Button variant="outline" onClick={selection.clearSelection}>
              –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä
            </Button>
          )}
        </div>
      </div>

      <ContainerStats stats={container.stats} />

      <div className="space-y-6">
        {container.rows.map((row) => (
          <div key={row.id} className="space-y-3">
            <div className="flex items-center gap-4">
              <Button
                variant={selection.selectedRows.has(row.id) ? 'default' : 'outline'}
                onClick={() => handleSelectRow(row)}
              >
                –†—è–¥ {row.name}
              </Button>
              <div className="text-sm text-muted-foreground">
                6 —Å—Ç–æ–µ–∫, {row.occupiedTrays} –ø–æ–¥–¥–æ–Ω–æ–≤ –∑–∞–Ω—è—Ç–æ
              </div>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
              {row.racks.map((rack) => (
                <RackCard
                  key={rack.id}
                  rack={rack}
                  isSelected={selection.selectedRacks.has(rack.id)}
                  mode={selection.mode}
                  onShortPress={() => handleRackShortPress(rack.id)}
                  onLongPress={(e) => handleRackLongPress(rack.id, e)}
                />
              ))}
            </div>
          </div>
        ))}
      </div>

      {selection.hasSelection && (
        <MultiSelectPanel
          selectedCount={selection.selectedRacks.size}
          onPlant={() => onPlantClick && onPlantClick()}
          onClear={() => {
            // –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å–∞–¥–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–µ–∫
            const selectedRackIds = Array.from(selection.selectedRacks);
            onInstantClearPlanned?.(selectedRackIds, 'rack');
            selection.clearSelection();
          }}
          onCancel={selection.clearSelection}
          onHarvest={() => {
            const selectedRackIds = Array.from(selection.selectedRacks);
            // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–µ–∫
            const affectedTrays: string[] = [];
            container.rows.forEach(row => {
              row.racks.forEach(rack => {
                if (selectedRackIds.includes(rack.id)) {
                  rack.trays.forEach(tray => {
                    if (tray.status === 'ready') {
                      affectedTrays.push(tray.id);
                    }
                  });
                }
              });
            });
            draftActions.addAction({
              type: 'harvest',
              targetType: 'rack',
              targetIds: selectedRackIds,
              affectedTrays
            });
          }}
          onStopGrowing={() => {
            const selectedRackIds = Array.from(selection.selectedRacks);
            console.log('üõë MultiSelectPanel: –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–π–∫–∏:', selectedRackIds);

            // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–µ–∫
            const affectedTrays: string[] = [];
            container.rows.forEach(row => {
              row.racks.forEach(rack => {
                if (selectedRackIds.includes(rack.id)) {
                  rack.trays.forEach(tray => {
                    if (!['empty', 'harvested'].includes(tray.status)) {
                      console.log('üõë –ù–∞–π–¥–µ–Ω –ø–æ–¥–¥–æ–Ω –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', tray.id, '—Å—Ç–∞—Ç—É—Å:', tray.status, '–≤ —Å—Ç–æ–π–∫–µ', rack.id);
                      affectedTrays.push(tray.id);
                    }
                  });
                }
              });
            });

            console.log('üõë MultiSelectPanel: –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã:', affectedTrays);

            // –ü–û–ö–ê–ó–´–í–ê–ï–ú –ú–û–î–ê–õ–ö–£ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            setPendingStopAction({ selectedRackIds, affectedTrays });
            setShowMassStopConfirmation(true);
          }}
          onCancelStop={() => {
            const selectedRackIds = Array.from(selection.selectedRacks);
            onInstantCancelStop?.(selectedRackIds, 'rack');
          }}
        />
      )}

      {contextMenu && contextRack && (
        <ContextMenu
          position={contextMenu.position}
          items={getRackContextMenuItems(
            contextRack,
            () => {
              if (onEnterRack) {
                onEnterRack(contextMenu.rackId);
              }
            },
            () => {
              selection.enterMultiMode();
              selection.toggleRack(contextMenu.rackId);
            },
            () => {
              // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–æ–π–∫—É –≤ —Ä–µ–∂–∏–º–µ –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä
              selection.enterMultiMode();
              selection.toggleRack(contextMenu.rackId);
              onPlantClick && onPlantClick();
            },
            () => {
              const selectedRackIds = [contextMenu.rackId];
              // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å—Ç–æ–π–∫–∏
              const affectedTrays: string[] = [];
              const rack = container.rows.flatMap(r => r.racks).find(r => r.id === contextMenu.rackId);
              if (rack) {
                rack.trays.forEach(tray => {
                  if (tray.status === 'ready') {
                    affectedTrays.push(tray.id);
                  }
                });
              }
              draftActions.addAction({
                type: 'harvest',
                targetType: 'rack',
                targetIds: selectedRackIds,
                affectedTrays
              });
            },
            () => {
              const selectedRackIds = [contextMenu.rackId];
              onInstantClearPlanned?.(selectedRackIds, 'rack');
            },
            () => {
              const selectedRackIds = [contextMenu.rackId];
              // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–¥–¥–æ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å—Ç–æ–π–∫–∏
              const affectedTrays: string[] = [];
              const rack = container.rows.flatMap(r => r.racks).find(r => r.id === contextMenu.rackId);
              if (rack) {
                rack.trays.forEach(tray => {
                  if (!['empty', 'harvested'].includes(tray.status)) {
                    affectedTrays.push(tray.id);
                  }
                });
              }

              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              setPendingStopAction({
                selectedRackIds,
                affectedTrays
              });
              setShowMassStopConfirmation(true);
              setContextMenu(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            },
            () => {
              const selectedRackIds = [contextMenu.rackId];
              onInstantCancelStop?.(selectedRackIds, 'rack');
            }
          )}
          onClose={() => setContextMenu(null)}
        />
      )}

      {/* –ú–æ–¥–∞–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è */}
      {pendingStopAction && (
        <StopGrowingConfirmation
          isOpen={showMassStopConfirmation}
          onClose={handleMassStopCancel}
          onConfirm={handleMassStopConfirm}
          targetIds={pendingStopAction.selectedRackIds}
          targetType="rack"
          containerData={container as any}
        />
      )}

    </div>
  );
}