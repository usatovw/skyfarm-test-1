'use client'

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { CropType, ContainerStatus } from "@/types/farming";
import { getAvailableCropsForContainer, getExistingCropsInContainer, mockCrops } from "@/data/mockData";
import { Search, Thermometer, Droplets, Wind, Sun, AlertTriangle, Check, Info } from 'lucide-react';

interface CropSelectorProps {
  isOpen: boolean;
  onClose: () => void;
  onCropSelected: (cropId: string) => void;
  availableCrops: CropType[];
  currentMode?: string;
  containerData?: ContainerStatus; // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
}

export default function CropSelector({ 
  isOpen, 
  onClose, 
  onCropSelected, 
  availableCrops, 
  currentMode, 
  containerData 
}: CropSelectorProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCropId, setSelectedCropId] = useState<string | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É–ª—å—Ç—É—Ä—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
  const existingCrops = containerData ? getExistingCropsInContainer(containerData) : [];
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫—É–ª—å—Ç—É—Ä—ã –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —É–∂–µ —Ä–∞—Å—Ç—É—â–∏–º–∏
  const compatibleCrops = containerData 
    ? getAvailableCropsForContainer(containerData)
    : availableCrops;

  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö - –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
  const filteredCrops = compatibleCrops.filter(crop => {
    const searchLower = searchTerm.toLowerCase();
    return searchTerm === '' || 
           crop.name.toLowerCase().includes(searchLower) ||
           crop.growthStages.some(stage => 
             stage.name.toLowerCase().includes(searchLower) ||
             stage.description.toLowerCase().includes(searchLower)
           ) ||
           crop.climateRequirements.temperature.min.toString().includes(searchTerm) ||
           crop.climateRequirements.temperature.max.toString().includes(searchTerm) ||
           crop.totalGrowthDays.toString().includes(searchTerm);
  });

  const currentModeCrop = currentMode ? mockCrops.find(c => c.id === currentMode) : null;
  const existingCropNames = existingCrops.map(cropId => 
    mockCrops.find(c => c.id === cropId)?.name
  ).filter(Boolean);

  const handleCropSelect = (cropId: string) => {
    console.log('üéØ handleCropSelect –≤—ã–∑–≤–∞–Ω —Å:', cropId);
    setSelectedCropId(cropId);
  };

  const handleConfirm = () => {
    console.log('üöÄ handleConfirm –≤—ã–∑–≤–∞–Ω, selectedCropId:', selectedCropId);
    if (selectedCropId) {
      console.log('‚úÖ –í—ã–∑—ã–≤–∞–µ–º onCropSelected —Å:', selectedCropId);
      onCropSelected(selectedCropId);
      setSelectedCropId(null);
      setSearchTerm('');
      onClose(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
    } else {
      console.warn('‚ùå selectedCropId –ø—É—Å—Ç–æ–π!');
    }
  };

  const handleCancel = () => {
    setSelectedCropId(null);
    setSearchTerm('');
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-[95vw] !max-w-[1400px] max-h-[90vh] overflow-hidden" style={{ width: '95vw', maxWidth: '1400px' }}>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Sprout className="h-5 w-5" />
            –í—ã–±–æ—Ä –∫—É–ª—å—Ç—É—Ä—ã –¥–ª—è –ø–æ—Å–∞–¥–∫–∏
          </DialogTitle>
          <DialogDescription>
            –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–¥–æ–Ω—ã.
            {currentModeCrop && (
              <>
                {' '}–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: <strong>{currentModeCrop.name}</strong>
              </>
            )}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6 max-h-[70vh] overflow-y-auto">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="–ü–æ–∏—Å–∫ –∫—É–ª—å—Ç—É—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, –¥–Ω—è–º —Ä–æ—Å—Ç–∞..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-10 h-12"
            />
            {searchTerm && (
              <button
                onClick={() => setSearchTerm('')}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground hover:text-foreground"
              >
                ‚úï
              </button>
            )}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—É–ª—å—Ç—É—Ä–∞—Ö */}
          {existingCrops.length > 0 && (
            <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-start gap-3">
                <Info className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                <div>
                  <p className="font-medium text-green-800 mb-1">–£–∂–µ —Ä–∞—Å—Ç—É—â–∏–µ –∫—É–ª—å—Ç—É—Ä—ã</p>
                  <p className="text-green-700">
                    –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —É–∂–µ —Ä–∞—Å—Ç—É—Ç: <strong>{existingCropNames.join(', ')}</strong>.
                    –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å –Ω–∏–º–∏ –∫—É–ª—å—Ç—É—Ä—ã.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ */}
          {currentMode && (
            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-start gap-3">
                <AlertTriangle className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                <div>
                  <p className="font-medium text-blue-800 mb-1">–†–µ–∂–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</p>
                  <p className="text-blue-700">
                    –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ <strong>{currentModeCrop?.name}</strong>.
                    –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫—É–ª—å—Ç—É—Ä—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å —ç—Ç–∏–º —Ä–µ–∂–∏–º–æ–º.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* –ù–û–í–ê–Ø –°–ï–¢–ö–ê –ö–£–õ–¨–¢–£–† - –ë–û–õ–¨–®–ò–ï –ö–ê–†–¢–û–ß–ö–ò */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ) */}
            {mockCrops
              .filter(crop => {
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
                const searchLower = searchTerm.toLowerCase();
                return searchTerm === '' || 
                       crop.name.toLowerCase().includes(searchLower) ||
                       crop.growthStages.some(stage => 
                         stage.name.toLowerCase().includes(searchLower) ||
                         stage.description.toLowerCase().includes(searchLower)
                       ) ||
                       crop.climateRequirements.temperature.min.toString().includes(searchTerm) ||
                       crop.climateRequirements.temperature.max.toString().includes(searchTerm) ||
                       crop.totalGrowthDays.toString().includes(searchTerm);
              })
              .map((crop) => {
              const isAvailable = filteredCrops.some(c => c.id === crop.id);
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
              const getUnavailableReason = () => {
                if (isAvailable) return null;
                
                const existingCrops = containerData ? getExistingCropsInContainer(containerData) : [];
                if (existingCrops.length > 0) {
                  return "–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å —Ä–∞—Å—Ç—É—â–∏–º–∏ –∫—É–ª—å—Ç—É—Ä–∞–º–∏";
                }
                
                if (currentMode && crop.id !== currentMode) {
                  return "–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å —Ä–µ–∂–∏–º–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞";
                }
                
                return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
              };
              
              const unavailableReason = getUnavailableReason();
              const isDisabled = !isAvailable;
              const isSelected = selectedCropId === crop.id;
              
              return (
                <Card 
                  key={crop.id}
                  className={`cursor-pointer transition-all duration-200 relative ${
                    isDisabled 
                      ? 'opacity-50 cursor-not-allowed' 
                      : 'hover:shadow-xl hover:scale-[1.02]'
                  } ${
                    isSelected && !isDisabled
                      ? 'ring-4 ring-primary ring-offset-4 bg-primary/10 shadow-xl scale-[1.02]' 
                      : isDisabled 
                        ? 'bg-muted/30' 
                        : 'bg-card hover:bg-accent/10'
                  }`}
                  onClick={() => {
                    if (!isDisabled) {
                      handleCropSelect(crop.id);
                      console.log('üéØ –ö—É–ª—å—Ç—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞:', crop.name, crop.id);
                    }
                  }}
                  role="button"
                  tabIndex={isDisabled ? -1 : 0}
                  aria-disabled={isDisabled}
                  onKeyDown={(e) => {
                    if ((e.key === 'Enter' || e.key === ' ') && !isDisabled) {
                      e.preventDefault();
                      handleCropSelect(crop.id);
                    }
                  }}
                >
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞ –≤ —É–≥–ª—É */}
                  {isSelected && !isDisabled && (
                    <div className="absolute -top-2 -right-2 bg-primary text-primary-foreground rounded-full p-2 shadow-lg z-10">
                      <Check className="h-4 w-4" />
                    </div>
                  )}

                  <CardContent className="p-4">
                    <div className="space-y-2">
                      {/* –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ - –ë–û–õ–¨–®–ò–ï */}
                      <div className="text-center space-y-2">
                        <div 
                          className="text-4xl mx-auto"
                          style={{ fontSize: '2.5rem', lineHeight: '1' }}
                        >
                          {crop.icon}
                        </div>
                        <div className="space-y-2">
                          <div className="flex items-center justify-center gap-2 flex-wrap">
                            <h3 
                              className={`font-semibold text-center ${isDisabled ? 'text-muted-foreground' : 'text-foreground'}`}
                              style={{ fontSize: '1rem', fontWeight: '600' }}
                            >
                              {crop.name}
                            </h3>
                            {isSelected && !isDisabled && (
                              <Check className="h-5 w-5 text-primary flex-shrink-0" />
                            )}
                          </div>
                          {crop.id === currentMode && (
                            <Badge variant="secondary" className="text-xs">
                              –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                            </Badge>
                          )}
                        </div>
                      </div>
                      
                      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ß–ò–¢–ê–ï–ú–û */}
                      <div className="space-y-1">
                        <div 
                          className={`text-center font-medium ${isDisabled ? 'text-muted-foreground' : 'text-foreground'}`}
                          style={{ fontSize: '0.875rem' }}
                        >
                          {crop.totalGrowthDays} –¥–Ω–µ–π
                        </div>
                        
                        <div className="flex items-center justify-center gap-1 text-muted-foreground">
                          <Thermometer className="h-3 w-3 text-red-500 flex-shrink-0" />
                          <span style={{ fontSize: '0.75rem' }}>
                            {crop.climateRequirements.temperature.min}-{crop.climateRequirements.temperature.max}¬∞C
                          </span>
                        </div>

                      </div>

                      {/* –°—Ç–∞—Ç—É—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ö–†–£–ü–ù–û */}
                      <div className="text-center">
                        {isDisabled && unavailableReason ? (
                          <Badge variant="destructive" className="text-xs px-2 py-1">
                            –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞
                          </Badge>
                        ) : crop.id === currentMode ? (
                          <Badge variant="default" className="bg-primary text-primary-foreground text-xs px-2 py-1">
                            –ê–∫—Ç–∏–≤–Ω—ã–π
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="text-green-600 border-green-600 bg-green-50 text-xs px-2 py-1">
                            ‚úì –î–æ—Å—Ç—É–ø–Ω–∞
                          </Badge>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ */}
          {searchTerm !== '' && mockCrops.filter(crop => {
            const searchLower = searchTerm.toLowerCase();
            return crop.name.toLowerCase().includes(searchLower) ||
                   crop.growthStages.some(stage => 
                     stage.name.toLowerCase().includes(searchLower) ||
                     stage.description.toLowerCase().includes(searchLower)
                   ) ||
                   crop.climateRequirements.temperature.min.toString().includes(searchTerm) ||
                   crop.climateRequirements.temperature.max.toString().includes(searchTerm) ||
                   crop.totalGrowthDays.toString().includes(searchTerm);
          }).length === 0 && (
            <div className="text-center py-16">
              <div className="text-8xl mb-6">üîç</div>
              <h3 className="font-medium text-foreground mb-2" style={{ fontSize: 'var(--text-xl)' }}>
                –ö—É–ª—å—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </h3>
              <p className="text-muted-foreground" style={{ fontSize: 'var(--text-base)' }}>
                –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫—É–ª—å—Ç—É—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É "{searchTerm}"
              </p>
            </div>
          )}
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è - –ö–†–£–ü–ù–´–ï –ö–ù–û–ü–ö–ò */}
        <div className="flex items-center justify-between pt-6 border-t bg-card">
          <div className="text-muted-foreground" style={{ fontSize: 'var(--text-sm)' }}>
            {selectedCropId && (
              <>
                –í—ã–±—Ä–∞–Ω–∞ –∫—É–ª—å—Ç—É—Ä–∞: <strong>{mockCrops.find(c => c.id === selectedCropId)?.name}</strong>
              </>
            )}
          </div>
          <div className="flex items-center gap-4">
            <Button variant="outline" onClick={handleCancel} size="lg">
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              onClick={handleConfirm}
              disabled={!selectedCropId}
              size="lg"
              className="min-w-[160px]"
            >
              {selectedCropId ? (
                <>
                  <Check className="h-4 w-4 mr-2" />
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä
                </>
              ) : (
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É'
              )}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

const Sprout = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21L12 8l5 13M7 21l5-8M12 8l5-8M7 21h10" />
  </svg>
);